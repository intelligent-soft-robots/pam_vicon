# Auto-generated with `stubgen -m pam_vicon.o80`
# Needs to be updated manually if there are changes in the cpp module!
#
from typing import Any, ClassVar, List

from typing import overload
import vicon_transformer.vicon_transformer_bindings

class BackEnd:
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: bool) -> None: ...
    def is_active(self) -> bool: ...
    @overload
    def pulse(self) -> States: ...
    @overload
    def pulse(self, arg0: FixedSizeViconFrame) -> States: ...
    @overload
    def pulse(self, arg0: List[State[0]]) -> States: ...

class FixedSizeViconFrame:
    frame_number: int
    frame_rate: float
    latency: float
    subjects: List[vicon_transformer.vicon_transformer_bindings.SubjectData[11]]
    time_stamp: int
    def __init__(self) -> None: ...

class FrontEnd:
    def __init__(self, arg0: str) -> None: ...
    @overload
    def add_command(self, arg0: int, arg1: State, arg2, arg3) -> None: ...
    @overload
    def add_command(self, arg0: int, arg1: State, arg2, arg3) -> None: ...
    @overload
    def add_command(self, arg0: int, arg1: State, arg2) -> None: ...
    @overload
    def add_command(self, arg0: int, arg1: State, arg2, arg3) -> None: ...
    def add_reinit_command(self) -> None: ...
    def burst(self, arg0: int) -> Observation: ...
    def final_burst(self) -> None: ...
    def get_frequency(self) -> float: ...
    def get_latest_observations(self, arg0: int) -> List[Observation]: ...
    def get_nb_actuators(self) -> int: ...
    def get_observations_since(self, arg0: int) -> List[Observation]: ...
    def initial_states(self) -> States: ...
    def is_backend_active(self) -> bool: ...
    def latest(self) -> Observation: ...
    @overload
    def pulse(self, arg0) -> Observation: ...
    @overload
    def pulse(self) -> Observation: ...
    def pulse_and_wait(self) -> Observation: ...
    def pulse_prepare_wait(self) -> Observation: ...
    def purge(self) -> None: ...
    def read(self, arg0: int) -> Observation: ...
    def reset_next_index(self) -> None: ...
    def wait(self) -> Observation: ...
    def wait_for_next(self) -> Observation: ...

class Introspector:
    def __init__(self, *args, **kwargs) -> None: ...
    def start(self, *args, **kwargs) -> Any: ...
    def stop(self, *args, **kwargs) -> Any: ...

class Observation:
    def __init__(self) -> None: ...
    def get_desired_states(self) -> States: ...
    def get_extended_state(self) -> FixedSizeViconFrame: ...
    def get_frequency(self) -> float: ...
    def get_iteration(self) -> int: ...
    def get_observed_states(self) -> States: ...
    def get_time_stamp(self) -> int: ...

class Serializer:
    def __init__(self) -> None: ...
    def deserialize(self, arg0: str, arg1: Observation) -> None: ...
    def serializable_size(self) -> int: ...
    def serialize(self, arg0: Observation) -> str: ...

class State:
    def __init__(self) -> None: ...
    def get(self) -> None: ...
    def set(self) -> None: ...
    def to_string(self) -> str: ...

class States:
    values: Any
    def __init__(self) -> None: ...
    def get(self, *args, **kwargs) -> Any: ...
    def set(self, arg0: int, arg1) -> None: ...

class Subjects:
    __members__: ClassVar[dict] = ...  # read-only
    BALL_LAUNCHER_FRONT: ClassVar[Subjects] = ...
    BALL_LAUNCHER_HEAD: ClassVar[Subjects] = ...
    LED_STICK: ClassVar[Subjects] = ...
    PING_BASE: ClassVar[Subjects] = ...
    ROBOT1_BASE: ClassVar[Subjects] = ...
    ROBOT1_RACKET: ClassVar[Subjects] = ...
    ROBOT1_UPPER_ARM: ClassVar[Subjects] = ...
    TABLE_CORNER_1: ClassVar[Subjects] = ...
    TABLE_CORNER_2: ClassVar[Subjects] = ...
    TABLE_CORNER_3: ClassVar[Subjects] = ...
    TABLE_CORNER_4: ClassVar[Subjects] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def from_json(arg0: str) -> FixedSizeViconFrame: ...
def get_subject_names() -> List[str[11]]: ...
def map_subject_name_to_index(arg0: str) -> int: ...
def please_stop(arg0: str) -> None: ...
def standalone_is_running(arg0: str) -> bool: ...
def start_standalone(
    arg0: str,
    arg1: float,
    arg2: bool,
    arg3: vicon_transformer.vicon_transformer_bindings.Receiver,
    arg4: str,
) -> None: ...
def stop_standalone(arg0: str) -> None: ...
def to_json(arg0: FixedSizeViconFrame) -> str: ...
